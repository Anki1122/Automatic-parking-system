import cv2
import numpy as np

def detect_parking_spaces(image_path):
    # Load the image
    image = cv2.imread(image_path)
    
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply edge detection (Canny)
    edges = cv2.Canny(gray, 50, 150)
    
    # Find contours in the edged image
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Loop over the contours
    for contour in contours:
        # Approximate the contour
        epsilon = 0.02 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        
        # If the contour has four vertices, it could be a parking space
        if len(approx) == 4:
            cv2.drawContours(image, [approx], 0, (0, 255, 0), 2)
    
    # Display the result
    cv2.imshow("Parking Spaces", image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Example usage
image_path = "parking_lot_image.jpg"
detect_parking_spaces(image_path)
